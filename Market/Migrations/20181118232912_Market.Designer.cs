// <auto-generated />
using Market.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Market.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181118232912_Market")]
    partial class Market
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Market.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdCategoria");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao");

                    b.HasKey("IdCategoria")
                        .HasName("PK_Categorias");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Market.Models.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdEndereco");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("Bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnName("Cep");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnName("Cidade");

                    b.Property<string>("Complemento")
                        .HasColumnName("Complemento");

                    b.Property<string>("Numero")
                        .HasColumnName("Numero");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnName("Rua");

                    b.HasKey("IdEndereco")
                        .HasName("PK_Enderecos");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("Market.Models.HistoricoInsumo", b =>
                {
                    b.Property<int>("IdHistoricoInsumo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdHistoricoInsumo");

                    b.Property<DateTime>("DataAdicao")
                        .HasColumnName("DataAdicao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome");

                    b.Property<double>("PrecoInsumo")
                        .HasColumnName("PrecoInsumo");

                    b.Property<double>("Quantidade")
                        .HasColumnName("Quantidade");

                    b.HasKey("IdHistoricoInsumo")
                        .HasName("PK_HistoricoInsumos");

                    b.ToTable("HistoricoInsumos");
                });

            modelBuilder.Entity("Market.Models.Insumo", b =>
                {
                    b.Property<int>("IdInsumo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdInsumo");

                    b.Property<double>("EstoqueMax")
                        .HasColumnName("EstoqueMax");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome");

                    b.Property<double>("PrecoInsumo")
                        .HasColumnName("PrecoInsumo");

                    b.Property<double>("Quantidade")
                        .HasColumnName("Quantidade");

                    b.HasKey("IdInsumo")
                        .HasName("PK_Insumos");

                    b.ToTable("Insumos");
                });

            modelBuilder.Entity("Market.Models.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdProduto");

                    b.Property<int>("CategoriaId")
                        .HasColumnName("CategoriaId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao");

                    b.Property<string>("Foto")
                        .HasColumnName("Foto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome");

                    b.Property<int?>("TamanhoId")
                        .HasColumnName("TamanhoId");

                    b.Property<double>("Valor")
                        .HasColumnName("Valor");

                    b.HasKey("IdProduto")
                        .HasName("PK_Produtos");

                    b.HasIndex("CategoriaId")
                        .HasName("IX_Produtos_CategoriaId");

                    b.HasIndex("TamanhoId")
                        .HasName("IX_Produtos_TamanhoId");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("Market.Models.ProdutoHasInsumo", b =>
                {
                    b.Property<int>("IdProdutoHasInsumo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdProdutoHasInsumo");

                    b.Property<int>("InsumoId")
                        .HasColumnName("InsumoId");

                    b.Property<int>("ProdutoId")
                        .HasColumnName("ProdutoId");

                    b.Property<double>("Quantidade")
                        .HasColumnName("Quantidade");

                    b.HasKey("IdProdutoHasInsumo")
                        .HasName("PK_ProdutoHasInsumos");

                    b.HasIndex("InsumoId")
                        .HasName("IX_ProdutoHasInsumos_InsumoId");

                    b.HasIndex("ProdutoId")
                        .HasName("IX_ProdutoHasInsumos_ProdutoId");

                    b.ToTable("ProdutoHasInsumos");
                });

            modelBuilder.Entity("Market.Models.Tamanho", b =>
                {
                    b.Property<int>("IdTamanho")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTamanho");

                    b.Property<int?>("CategoriaId")
                        .HasColumnName("CategoriaId");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao");

                    b.HasKey("IdTamanho")
                        .HasName("PK_Tamanhos");

                    b.HasIndex("CategoriaId")
                        .HasName("IX_Tamanhos_CategoriaId");

                    b.ToTable("Tamanhos");
                });

            modelBuilder.Entity("Market.Models.TipoDeUsuario", b =>
                {
                    b.Property<int>("IdTipoDeUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTipoDeUsuario");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao");

                    b.HasKey("IdTipoDeUsuario")
                        .HasName("PK_TipoDeUsuarios");

                    b.ToTable("TipoDeUsuarios");
                });

            modelBuilder.Entity("Market.Models.Usuario", b =>
                {
                    b.Property<int>("IdCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdCadastro");

                    b.Property<string>("Celular")
                        .HasColumnName("Celular");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnName("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email");

                    b.Property<int>("EnderecoId")
                        .HasColumnName("EnderecoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome");

                    b.Property<string>("Password")
                        .HasColumnName("Password");

                    b.Property<string>("Sexo")
                        .HasColumnName("Sexo");

                    b.Property<bool>("Status")
                        .HasColumnName("Status");

                    b.Property<string>("Telefone")
                        .HasColumnName("Telefone");

                    b.Property<int>("TipoDeUsuarioId")
                        .HasColumnName("TipoDeUsuarioId");

                    b.HasKey("IdCadastro")
                        .HasName("PK_Cadastros");

                    b.HasIndex("EnderecoId")
                        .HasName("IX_Cadastros_EnderecoId");

                    b.HasIndex("TipoDeUsuarioId")
                        .HasName("IX_Cadastros_TipoDeUsuarioId");

                    b.ToTable("Cadastros");
                });

            modelBuilder.Entity("Market.Models.Produto", b =>
                {
                    b.HasOne("Market.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_Produtos_Categorias_CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Market.Models.Tamanho", "Tamanho")
                        .WithMany()
                        .HasForeignKey("TamanhoId")
                        .HasConstraintName("FK_Produtos_Tamanhos_TamanhoId");
                });

            modelBuilder.Entity("Market.Models.ProdutoHasInsumo", b =>
                {
                    b.HasOne("Market.Models.Insumo", "Insumo")
                        .WithMany()
                        .HasForeignKey("InsumoId")
                        .HasConstraintName("FK_ProdutoHasInsumos_Insumos_InsumoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Market.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .HasConstraintName("FK_ProdutoHasInsumos_Produtos_ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Market.Models.Tamanho", b =>
                {
                    b.HasOne("Market.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .HasConstraintName("FK_Tamanhos_Categorias_CategoriaId");
                });

            modelBuilder.Entity("Market.Models.Usuario", b =>
                {
                    b.HasOne("Market.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .HasConstraintName("FK_Cadastros_Enderecos_EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Market.Models.TipoDeUsuario", "TipoDeUsuario")
                        .WithMany()
                        .HasForeignKey("TipoDeUsuarioId")
                        .HasConstraintName("FK_Cadastros_TipoDeUsuarios_TipoDeUsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
